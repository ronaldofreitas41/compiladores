package parser;

class LangParser;
parser code {:
    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line
:}

init with {:               :};
scan with {: return s.nextToken(); :};

// Declaração dos terminais
terminal INT_LITERAL, TRUE, FALSE, PLUS; //Char, Bool, Float, TYID, ID, INT, FLOAT, CHAR
//terminal LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK;
//terminal COLONCOLON, EQUALS, AND, LT, EQ, NEQ, PLUS, MINUS, STAR, SLASH, PERCENT, NOT;
//terminal IF, ELSE, ITERATE, READ, PRINT, RETURN, NEW, NULL, TRUE, FALSE;

// Declaração dos não terminais
non terminal exp;

precedence left PLUS;
exp ::= INT_LITERAL 
    | TRUE
    | FALSE
    | exp PLUS exp  
    ;


/* Produções
prod prog ::= data func;
prod data ::= "data" TYID LPAREN decl RPAREN;
prod decl ::= ID EQUALS type SEMI;
prod func ::= ID LPAREN params RPAREN ( COLON type ( COMMA type )* )? block;
prod params ::= ID COLONCOLON type ( COMMA ID COLONCOLON type )*;
prod type ::= btype | type LBRACK RBRACK;
prod btype ::= Int | Char | Bool | Float | TYID;
prod block ::= LBRACE cmd RBRACE;
prod stmtBlock ::= block | cmd;
prod cmd ::= IF LPAREN exp RPAREN stmtBlock
           | IF LPAREN exp RPAREN stmtBlock ELSE stmtBlock
           | ITERATE LPAREN loopCond RPAREN stmtBlock
           | READ lvalue SEMI
           | PRINT exp SEMI
           | RETURN exp ( COMMA exp )* SEMI
           | lvalue EQUALS exp SEMI
           | ID LPAREN exps RPAREN ( LT lvalue ( COMMA lvalue )* GT )? SEMI;
prod loopCond ::= exp;
prod exp ::= exp AND exp | rexp;
prod rexp ::= aexp LT aexp | rexp EQ aexp | rexp NEQ aexp | aexp;
prod aexp ::= aexp PLUS mexp | aexp MINUS mexp | mexp;
prod mexp ::= mexp STAR sexp | mexp SLASH sexp | mexp PERCENT sexp | sexp;
prod sexp ::= NOT sexp | MINUS sexp | TRUE | FALSE | NULL | INT | FLOAT | CHAR | pexp;
prod pexp ::= lvalue | LPAREN exp RPAREN | NEW type ( LBRACK exp RBRACK )? | ID LPAREN exps RPAREN LBRACK exp RBRACK | ID;
prod lvalue ::= lvalue LBRACK exp RBRACK | lvalue DOT ID;
prod exps ::= exp ( COMMA exp )*; 
*/