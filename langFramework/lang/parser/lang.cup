package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import java.util.ArrayList;

class LangParser;
parser code {:
    // Conecta o parser ao lexer
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
:}

init with {:               :};
scan with {: return s.nextToken(); :};

/* Definição dos tokens*/                                    /* Descrição dos tokens    */
terminal PLUS, MINUS, TIMES, DIVIDE, MOD;                    // Operadores aritméticos ('+', '-', '*', '/', '%')
terminal EQUAL, DIFFERENT, LESS, GREATER;                    // Operadores relacionais ('==', '!=', '<', '>')
terminal AND, NOT, DCOLON, ASSIGN;                           // Operadores lógicos e de atribuição ('&&', '!', ':', '=')
terminal LP, RP, LBRACE, RBRACE, LBRACK, RBRACK;             // '(', ')', '{', '}', '[', ']'
terminal SEMICOLON, COMMA, COLON, DOT, QUOTATION_MARKS;      // ';', ',', ':', '.', '"'
terminal Integer INT;                                        // Número inteiro
terminal Float FLOAT;                                        // Número real
terminal String ID, CHAR;                                    // Identificador, caractere
terminal Boolean BOOL, TRUE, FALSE, NULL;                    // Booleano, true, false, null
terminal IDENTIFIER, TYPE_ID;                                // Identificador, tipo
terminal ESCAPE, ASCII;                                      // Caracteres de escape, ASCII
terminal ARR;                                                // Array
terminal IF, ELSE, ITERATE, RETURN, READ, PRINT, NEW;        // Comandos

/* Não-terminais */
non terminal Prog prog;
non terminal Exp expr;
non terminal Type type;
non terminal Cmd cmd;
non terminal StmtBlock stmtBlock;
non terminal LoopCond loopCond;
non terminal Params params;
non terminal Decl decl;
non terminal Func func;
non terminal Data data;
non terminal LValue lvalue;
non terminal Exps exps;
non terminal Block block;
non terminal ParamList param_list;
non terminal Param param;
non terminal TypeList type_list;
non terminal DataList data_list; // Adicionando a declaração do não-terminal data_list
non terminal FuncList func_list; // Adicionando a declaração do não-terminal func_list
non terminal DeclList decl_list; // Adicionando a declaração do não-terminal decl_list

/* Precedência e associatividade dos operadores */
precedence left AND;
precedence left EQUAL, DIFFERENT;
precedence left LESS, GREATER;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right NOT;

/* Regras da gramática */



// Expressões
expr ::= expr:e1 AND expr:e2 {: RESULT = new And(sleft, sright, e1, e2); :}
       | expr:e1 EQUAL expr:e2 {: RESULT = new Equal(sleft, sright, e1, e2); :}
       | expr:e1 DIFFERENT expr:e2 {: RESULT = new Diff(sleft, sright, e1, e2); :}
       | expr:e1 LESS expr:e2 {: RESULT = new Less(sleft, sright, e1, e2); :}
       | expr:e1 GREATER expr:e2 {: RESULT = new Greater(sleft, sright, e1, e2); :}
       | expr:e1 PLUS expr:e2 {: RESULT = new Plus(sleft, sright, e1, e2); :}
       | expr:e1 MINUS expr:e2 {: RESULT = new Sub(sleft, sright, e1, e2); :}
       | expr:e1 TIMES expr:e2 {: RESULT = new Times(sleft, sright, e1, e2); :}
       | expr:e1 DIVIDE expr:e2 {: RESULT = new Div(sleft, sright, e1, e2); :}
       | expr:e1 MOD expr:e2 {: RESULT = new Mod(sleft, sright, e1, e2); :}
       | NOT expr:e {: RESULT = new Not(sleft, sright, e); :}
       | MINUS expr:e {: RESULT = new Neg(sleft, sright, e); :}
       | LP expr:e RP {: RESULT = e; :}
       | INT:n {: RESULT = new IntLit(n); :}
       | FLOAT:n {: RESULT = new FloatLit(n); :}
       | TRUE {: RESULT = new BoolLit(true); :}
       | FALSE {: RESULT = new BoolLit(false); :}
       | NULL {: RESULT = new NullLit(); :}
       | CHAR:c {: RESULT = new CharLit(c); :}
       ;