/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
//import lang.ast.decl.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import java.util.ArrayList;


class LangParser;
parser code {:
    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line
:}

init with {:               :};
scan with {: return s.nextToken(); :};

/* define how to connect to the scanner! */

terminal PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal EQUAL, DIFFERENT, LESS, GREATER;
terminal AND, NOT, DOUBLE_COLON, ASSIGN;
terminal OPEN_PARENTHESIS, CLOSE_PARENTHESIS, OPEN_BRACES, CLOSE_BRACES;
terminal SEMICOLON, COMMA, COLON, DOT, QUOTATION_MARKS;
terminal Integer INT;
terminal Float FLOAT;
terminal String ID, CHAR;
terminal Boolean BOOL, TRUE, FALSE, NULL;
terminal IDENTIFIER, TYPE_ID;
terminal ESCAPE, ASCII;
terminal ARR;

/* Non-terminais */
non terminal Prog prog;
non terminal Exp expr;
non terminal Type type;
non terminal Cmd cmd;
non terminal StmtBlock stmtBlock;
non terminal LoopCond loopCond;
non terminal Params params;
non terminal Decl decl;

/* Precedência e associatividade dos operadores */
precedence left OR;
precedence left AND;
precedence left EQUAL, DIFFERENT, DOUBLE_EQUAL;
precedence left LESS, GREATER;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right NOT;

/* Non terminals */
non terminal Exp expr;
non terminal Exp prog;

/* The grammar rules */

prog ::= expr:e {: RESULT = e; :}
       ;

expr  ::= expr:e1 PLUS:s expr:e2 {: RESULT = new Plus(sleft, sright, e1, e2); :}
       |  expr:e1 TIMES:s expr:e2 {: RESULT = new Times(sleft, sright, e1, e2); :}
       |  expr:e1 MINUS:s expr:e2 {: RESULT = new Sub(sleft, sright, e1, e2); :}
       |  expr:e1 DIVIDE:s expr:e2 {: RESULT = new Div(sleft, sright, e1, e2); :}
       |  expr:e1 MOD:s expr:e2 {: RESULT = new Mod(sleft, sright, e1, e2); :}
       |  expr:e1 EQUAL:s expr:e2 {: RESULT = new Equal(sleft, sright, e1, e2); :}
       |  expr:e1 DIFFERENT:s expr:e2 {: RESULT = new Different(sleft, sright, e1, e2); :}
       |  expr:e1 LESS:s expr:e2 {: RESULT = new Less(sleft, sright, e1, e2); :}
       |  expr:e1 GREATER:s expr:e2 {: RESULT = new Greater(sleft, sright, e1, e2); :}

       /*(???) DÚVIDA: As seguintes instâncias foram criadas extendendo Exp, está correto ou devo criar uma nova superclasse como Div extends BinOp ?*/
       |  expr:e1 AND:n expr:e2 {: RESULT = new And(nleft, nright, e1, e2); :}
       |  NOT:n expr:e1 {: RESULT = new Not(nleft, nright, e1); :}
       /* ???????????????????? */


       |  LP expr:e RP {: RESULT = e; :}
       |  INT:n {: RESULT = new Int(nleft, nright, n); :}
       |  FLOAT:n2 {: RESULT = new Float(n2left, n2right, n2); :}
       |  TRUE:t {: RESULT = new Bool(tleft, tright, t); :}
       |  FALSE:f {: RESULT = new Bool(fleft, fright, f); :}
       |  ID:i {: RESULT = new Var(ileft, iright, i); :}
       ;