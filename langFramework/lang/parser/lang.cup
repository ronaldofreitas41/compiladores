/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/

/*
 * Ronaldo Luiz de Freitas Santos 20.1.8113
 * Bernardo Lucas de Araujo Dias 20.1.8011
 */

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import java.util.ArrayList;

class LangParser;
parser code {:
    // Conecta o parser ao lexer
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
:}

init with {:               :};
scan with {: return s.nextToken(); :};

/* Definição dos tokens */
terminal PLUS, MINUS, TIMES, DIVIDE, MOD; // Operadores aritméticos
terminal EQUAL, DIFFERENT, LESS, GREATER; // Operadores relacionais
terminal AND, NOT, DCOLON, ASSIGN;  // &&, !, :, =
terminal LP, RP, LBRACE, CBRACE; // (, ), {, }
terminal SEMICOLON, COMMA, COLON, DOT, QUOTATION_MARKS;
terminal Integer INT;
terminal Float FLOAT;
terminal String ID, CHAR;
terminal Boolean BOOL, TRUE, FALSE, NULL;
terminal IDENTIFIER, TYPE_ID;
terminal ESCAPE, ASCII;
terminal ARR;
terminal IF, ELSE, ITERATE, RETURN, READ, PRINT, NEW;

/* Não-terminais */
non terminal Prog prog;
non terminal Exp expr;
non terminal Type type;
non terminal Cmd cmd;
non terminal StmtBlock stmtBlock;
non terminal LoopCond loopCond;
non terminal Params params;
non terminal Decl decl;
non terminal Func func;
non terminal Data data;
non terminal LValue lvalue;
non terminal Exps exps;

/* Precedência e associatividade dos operadores */
precedence left OR;
precedence left AND;
precedence left EQUAL, DIFFERENT;
precedence left LESS, GREATER;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right NOT;

/* Regras da gramática */

// Definição do programa
prog ::= data:d func:f  {: RESULT = new Program(d, f); :};

// Definição de tipos (data)
data ::= TYPE_ID t LBRACE decl:s CBRACE {: RESULT = new DataType(t, s); :};

// Declaração de variáveis
decl ::= ID DCOLON type:t SEMICOLON {: RESULT = new Decl(sleft, sright, ID, t); :};

// Definição de funções
func ::= ID LP [params] RP COLON type block {: RESULT = new Function(sleft, sright, ID, params, type, block); :};

// Parâmetros das funções
params ::= ID DCOLON type:t { COMMA ID DCOLON type } {: RESULT = new Params(sleft, sright, t); :};

// Bloco de comandos
stmtBlock ::= LBRACE cmd:s CBRACE {: RESULT = new StmtBlock(sleft, sright, s); :};

// Comandos
cmd ::= IF LP expr:e RP stmtBlock:s ELSE stmtBlock:s2 {: RESULT = new IfElse(sleft, sright, e, s, s2); :} // if-else
    | ITERATE LP loopCond:c RP stmtBlock:s {: RESULT = new Iterate(sleft, sright, c, s); :} // loop
    | READ lvalue:l SEMICOLON {: RESULT = new Read(sleft, sright, l); :} // leitura
    | PRINT expr:e SEMICOLON {: RESULT = new Print(sleft, sright, e); :} // impressão
    | RETURN expr:e { COMMA expr } SEMICOLON {: RESULT = new Return(sleft, sright, e); :} // retorno
    | lvalue:l ASSIGN expr:e SEMICOLON {: RESULT = new Assign(sleft, sright, l, e); :} // atribuição
    | ID LP exps RP SEMICOLON {: RESULT = new FunctionCall(sleft, sright, ID, exps); :} // chamada de função
    ;

// Condição do loop
loopCond ::= ID COLON expr:e {: RESULT = new LoopCond(sleft, sright, ID, e); :}
    | expr:e {: RESULT = new LoopCond(sleft, sright, e); :} ;

// Expressões
expr ::= expr:e1 PLUS expr:e2 {: RESULT = new Plus(sleft, sright, e1, e2); :}
    | expr:e1 MINUS expr:e2 {: RESULT = new Sub(sleft, sright, e1, e2); :}
    | expr:e1 TIMES expr:e2 {: RESULT = new Times(sleft, sright, e1, e2); :}
    | expr:e1 DIVIDE expr:e2 {: RESULT = new Div(sleft, sright, e1, e2); :}
    | expr:e1 MOD expr:e2 {: RESULT = new Mod(sleft, sright, e1, e2); :}
    | expr:e1 EQUAL expr:e2 {: RESULT = new Equal(sleft, sright, e1, e2); :}
    | expr:e1 DIFFERENT expr:e2 {: RESULT = new Diff(sleft, sright, e1, e2); :}
    | expr:e1 LESS expr:e2 {: RESULT = new Less(sleft, sright, e1, e2); :}
    | expr:e1 GREATER expr:e2 {: RESULT = new Greater(sleft, sright, e1, e2); :}
    | LP expr:e RP {: RESULT = e; :}
    | INT:n {: RESULT = new IntLit(sleft, sright, n); :}
    | FLOAT:n2 {: RESULT = new FloatLit(sleft, sright, n2); :}
    | TRUE:t {: RESULT = new BoolLit(sleft, sright, t); :}
    | FALSE:f {: RESULT = new BoolLit(sleft, sright, f); :}
    | NULL:n {: RESULT = new NullLit(sleft, sright, n); :}
    | CHAR:c {: RESULT = new CharLit(sleft, sright, c); :}
    | ID:i {: RESULT = new Var(sleft, sright, i); :}
    | NEW type:t LBRACE expr:e RBRACE {: RESULT = new NewInstance(sleft, sright, t, e); :} // instanciação de objetos
    ;

// Valores à esquerda das expressões
lvalue ::= ID {: RESULT = new LValue(sleft, sright, ID); :}
    | lvalue LBRACE expr RBRACE {: RESULT = new ArrayAccess(sleft, sright, lvalue, expr); :}
    | lvalue DOT ID {: RESULT = new FieldAccess(sleft, sright, lvalue, ID); :} ;

// Lista de expressões
exps ::= expr:e { COMMA expr } {: RESULT = new Exps(sleft, sright, e); :};
