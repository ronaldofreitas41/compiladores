
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LangParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\003\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\014\006\006\010\007\011\005\012\010\013" +
    "\004\001\002\000\012\002\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\007\ufffb\001" +
    "\002\000\014\006\006\010\007\011\005\012\010\013\004" +
    "\001\002\000\012\002\ufffc\004\ufffc\005\ufffc\007\ufffc\001" +
    "\002\000\012\002\ufffa\004\ufffa\005\ufffa\007\ufffa\001\002" +
    "\000\004\002\017\001\002\000\010\002\001\004\013\005" +
    "\014\001\002\000\014\006\006\010\007\011\005\012\010" +
    "\013\004\001\002\000\014\006\006\010\007\011\005\012" +
    "\010\013\004\001\002\000\012\002\ufffe\004\ufffe\005\ufffe" +
    "\007\ufffe\001\002\000\012\002\uffff\004\uffff\005\014\007" +
    "\uffff\001\002\000\004\002\000\001\002\000\010\004\013" +
    "\005\014\007\021\001\002\000\012\002\ufffd\004\ufffd\005" +
    "\ufffd\007\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\006\002\011\003\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\015\001\001\000\004\002\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.nextToken(); 
    }


    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LangParser$actions {
  private final LangParser parser;

  /** Constructor */
  CUP$LangParser$actions(LangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action_part00000000(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LangParser$result;

      /* select the action based on the action number */
      switch (CUP$LangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		RESULT = start_val;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LangParser$parser.done_parsing();
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Plus (sleft,sright,e1,e2);
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr TIMES expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Times(sleft,sright,e1,e2);
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= LP expr RP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= NUMBER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT =  new IntLit(ileft,iright,i);    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= TRUE 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT =  new BoolLit (ileft, iright, i); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= FALSE 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT =  new BoolLit (ileft, iright, i); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT  = new Var ( ileft, iright, i);  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
              return CUP$LangParser$do_action_part00000000(
                               CUP$LangParser$act_num,
                               CUP$LangParser$parser,
                               CUP$LangParser$stack,
                               CUP$LangParser$top);
    }
}

}
