
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.decl.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LangParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\003\007\000\002\006\004" +
    "\000\002\006\002\000\002\026\003\000\002\026\002\000" +
    "\002\030\005\000\002\030\003\000\002\027\005\000\002" +
    "\025\005\000\002\016\006\000\002\017\004\000\002\017" +
    "\002\000\002\011\005\000\002\011\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\021\003\000\002\021\003\000\002\014" +
    "\007\000\002\014\011\000\002\014\007\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\006\000" +
    "\002\014\007\000\002\015\004\000\002\015\002\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\002\ufffe\055\ufffe\001\002\000\006\002" +
    "\ufffb\055\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\004\014\013\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\055\uffff\001\002\000\004" +
    "\002\ufffc\001\002\000\004\031\014\001\002\000\004\042" +
    "\015\001\002\000\004\025\020\001\002\000\004\032\017" +
    "\001\002\000\006\002\ufffd\055\ufffd\001\002\000\016\011" +
    "\027\012\021\013\022\014\026\015\025\016\030\001\002" +
    "\000\006\033\uffe8\035\uffe8\001\002\000\006\033\uffec\035" +
    "\uffec\001\002\000\006\033\032\035\031\001\002\000\006" +
    "\033\ufff0\035\ufff0\001\002\000\006\033\uffe9\035\uffe9\001" +
    "\002\000\006\033\uffeb\035\uffeb\001\002\000\006\033\uffed" +
    "\035\uffed\001\002\000\006\033\uffea\035\uffea\001\002\000" +
    "\004\032\ufff4\001\002\000\004\034\033\001\002\000\006" +
    "\033\ufff1\035\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\002\004\004\003\001\001\000\006\003" +
    "\010\006\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\022\013\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.nextToken(); 
    }


    // Conecta o parser ao lexer
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LangParser$actions {
  private final LangParser parser;

  /** Constructor */
  CUP$LangParser$actions(LangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action_part00000000(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LangParser$result;

      /* select the action based on the action number */
      switch (CUP$LangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= dataList funcList 
            {
              Prog RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Data> d = (ArrayList<Data>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		ArrayList<FunDef> f = (ArrayList<FunDef>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Program(dleft,dright,d,f); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		RESULT = start_val;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LangParser$parser.done_parsing();
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dataList ::= dataList data 
            {
              ArrayList<Data> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Data> dl = (ArrayList<Data>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("dataList",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dataList ::= 
            {
              ArrayList<Data> RESULT =null;
		 RESULT = new ArrayList<Data>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("dataList",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // data ::= DATA TYID LBRACE decl RBRACE 
            {
              Data RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Data(sleft, sright, id, d); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("data",1, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcList ::= funcList func 
            {
              ArrayList<FunDef> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<FunDef> fl = (ArrayList<FunDef>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		FunDef f = (FunDef)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("funcList",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcList ::= 
            {
              ArrayList<FunDef> RESULT =null;
		 RESULT = new ArrayList<FunDef>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("funcList",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // paramList ::= bindList 
            {
              ArrayList<Bind> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		ArrayList<Bind> l = (ArrayList<Bind>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = l;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramList ::= 
            {
              ArrayList<Bind> RESULT =null;
		 RESULT =  new ArrayList<Bind>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bindList ::= bind COMMA bindList 
            {
              ArrayList<Bind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Bind b = (Bind)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		ArrayList<Bind> bl = (ArrayList<Bind>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 bl.add(b); RESULT = bl;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bindList",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bindList ::= bind 
            {
              ArrayList<Bind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Bind b = (Bind)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ArrayList<Bind> arr = new ArrayList<Bind>();
                                        arr.add(b);
                                        RESULT = arr; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bindList",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bind ::= type COLON ID 
            {
              Bind RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LType ty = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Bind(tleft,tright,ty,new Var(vleft, vright, v)); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bind",21, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param ::= ID DCOLON type 
            {
              Bind RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Param(sleft, sright, i, t); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= ID DCOLON type SEMICOLON 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Decl(tleft, tright, i, t); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declList ::= declList decl 
            {
              ArrayList<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Decl> dl = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("declList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declList ::= 
            {
              ArrayList<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("declList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= type LBRACKET RBRACKET 
            {
              LType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		                                  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= bType 
            {
              LType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType b = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = b;                       
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typeList ::= typeList COMMA type 
            {
              ArrayList<LType> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		ArrayList<LType> tl = (ArrayList<LType>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 tl.add(t); RESULT = tl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("typeList",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // typeList ::= type 
            {
              ArrayList<LType> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 List<Type> l = new ArrayList<Type>(); l.add(t); RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("typeList",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bType ::= TYBOOL 
            {
              LType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyBool(sleft, sright);  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bType",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bType ::= TYINT 
            {
              LType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyInt(sleft, sright);   
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bType",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bType ::= TYID 
            {
              LType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyId(sleft, sright);    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bType",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bType ::= TYCHAR 
            {
              LType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyChar(sleft, sright);  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bType",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bType ::= TYNULL 
            {
              LType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyNull(sleft, sright);  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bType",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bType ::= TYFLOAT 
            {
              LType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyFloat(sleft, sright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("bType",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtBlock ::= block 
            {
              StmtBlock RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block bk = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new StmtBlock(bkleft,bkright,bk.getCommands()); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtBlock ::= cmd 
            {
              StmtBlock RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new StmtBlock(cleft,cright,Arrays.asList(c)); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmd ::= IF LP expr RP stmtBlock 
            {
              Cmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock s = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new If(cleft, cright, e, s);          
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cmd ::= IF LP expr RP stmtBlock ELSE stmtBlock 
            {
              Cmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		StmtBlock s1 = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock s2 = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new IfElse(cleft, cright, e, s1, s2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cmd ::= ITERATE LP loopCond RP stmtBlock 
            {
              Cmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LoopCond lc = (LoopCond)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock s = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Iterate(cleft, cright, lc, s);    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmd ::= READ lvalue SEMICOLON 
            {
              Cmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Read(cleft, cright, lv);          
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmd ::= PRINT expr SEMICOLON 
            {
              Cmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Print(cleft, cright, e);          
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmd ::= RETURN exps SEMICOLON 
            {
              Cmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exps e = (Exps)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Return(cleft, cright, e);         
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmd ::= lvalue ASSIGN expr SEMICOLON 
            {
              Cmd RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Assign(cleft, cright, lv, e);     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cmd ::= ID LP expList RP SEMICOLON 
            {
              Cmd RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		 RESULT = new FuncCall(i, el);                  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cmdList ::= cmdList cmd 
            {
              ArrayList<Cmd> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Cmd> cl = (ArrayList<Cmd>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",11, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cmdList ::= 
            {
              ArrayList<Cmd> RESULT =null;
		 RESULT = new ArrayList<Cmd>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",11, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block ::= LBRACE cmdList RBRACE 
            {
              Block RESULT =null;
		 RESULT = new Block(sleft, sright, cmd); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmtBlock ::= block 
            {
              StmtBlock RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = b; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmtBlock ::= cmd 
            {
              StmtBlock RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = c; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new And(sleft, sright, e1, e2);     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr EQUAL expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Equal(sleft, sright, e1, e2);   
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr DIFFERENT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Diff(sleft, sright, e1, e2);    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr LESS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Less(sleft, sright, e1, e2);    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr GREATER expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Greater(sleft, sright, e1, e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Plus(sleft, sright, e1, e2);    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MINUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Sub(sleft, sright, e1, e2);     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr TIMES expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Times(sleft, sright, e1, e2);   
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr DIVIDE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Div(sleft, sright, e1, e2);     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MOD expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Mod(mleft, mright, e1, e2);     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NOT expr 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Not(nleft, nright, e);          
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= MINUS expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Neg(sleft, sright, e);          
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= LP expr RP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e;                                  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= INT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new IntLit(n);                      
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= FLOAT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FloatLit(n);                    
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= TRUE 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new BoolLit(true);                  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= FALSE 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new BoolLit(false);                 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= NULL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new NullLit();                      
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new CharLit(c);                     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expList ::= expList COMMA expr 
            {
              ArrayList<Exp> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expList",6, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expList ::= expr 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ArrayList<Exp> l = new ArrayList<>(); l.add(e); RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expList",6, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
              return CUP$LangParser$do_action_part00000000(
                               CUP$LangParser$act_num,
                               CUP$LangParser$parser,
                               CUP$LangParser$stack,
                               CUP$LangParser$top);
    }
}

}
